# merge gene expression data
left_join(
data10x@assays$regulonContinuous@data[regulon.tmp, , drop = FALSE] %>%
as.matrix() %>%
t() %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "cellBarcode") %>%
magrittr::set_colnames(c("cellBarcode", "regulonAuc"))) %>%
dplyr::arrange(regulonAuc)
plot.tmp <-
ggplot(
data.tmp,
mapping = aes(x = umapRnaPcSct_1, y = umapRnaPcSct_2, color = regulonAuc)) +
geom_point(size = 1, alpha = 0.8) +
labs(x = "UMAP 1", y = "UMAP 2",
title =
paste0(str_remove(regulon.tmp, " \\([0-9]+g\\)"), " regulon, ",
direction.tmp, " in cluster ", cluster.tmp)) +
scale_color_gradient(
paste0(regulon.tmp, "\nregulon\nactivity"),
low = colsGeneCounts[1], high = colsGeneCounts[2])
as.pdf(
plot.tmp,
file =
file.path(
dirPlotsRnaPcSctUmapByRegulonContinuousTop, direction.tmp,
paste0("plotUmapRnaPcSctByRegulonContinuousTop.",
"cluster", cluster.tmp, ".",
regulon.tmp, ".pdf")),
width = 5, height = 5)
}
}
rm_tmp(ask = FALSE)
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous <- list()
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["nRegulonsToPlotPerCluster"]] <- 10
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["regulonsToPlot"]] <-
clusterMarkers[[paste0(clusterName[["rnaPcSct"]], "_regulonContinuous")]] %>%
dplyr::arrange(cluster, p_val) %>%
group_by(cluster) %>%
dplyr::slice(1:heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["nRegulonsToPlotPerCluster"]]) %>%
dplyr::pull(gene) %>%
unique()
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["cellsToExclude"]] <-
c()
# set up color scheme
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["annotationCols"]] <- list()
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["annotationCols"]][["cluster"]] <-
big_colorblind_pal(n_distinct(clusterMarkers[[clusterName[["rnaPcSct"]]]]$cluster)) %>%
setNames(as.character(sort(unique(clusterMarkers[[clusterName[["rnaPcSct"]]]]$cluster))))
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["annotationCols"]][["treatment"]] <-
palTreatment
# Determine order of libraries (for use with counts and heatmap annotation)
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["cellBarcodeOrder"]] <-
data10x@meta.data %>%
dplyr::filter(
cellBarcode %nin% heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["cellsToExclude"]]) %>%
dplyr::arrange(
!!rlang::sym(clusterName[["rnaPcSct"]]),
treatment, cellBarcode) %>%
pull(cellBarcode)
# Make a column annotation object
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["colAnno"]] <-
HeatmapAnnotation(
df =
data10x@meta.data[
match(
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["cellBarcodeOrder"]],
data10x@meta.data$cellBarcode),] %>%
dplyr::select(
cluster = !!rlang::sym(clusterName[["rnaPcSct"]]),
treatment),
col = list(
cluster =
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["annotationCols"]][["cluster"]],
treatment =
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["annotationCols"]][["treatment"]]),
show_legend = c(TRUE, TRUE))
# Set up heatmap counts matrix
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["countMatrix"]] <-
data10x@assays$regulonContinuous@data[
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["regulonsToPlot"]],
match(
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["cellBarcodeOrder"]],
colnames(data10x@assays$regulonContinuous@data))]
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["countMatrixRange01"]] <-
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["countMatrix"]] %>%
apply(MARGIN = 1, range01) %>%
t()
# set gene name display options
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["maxGenesForNames"]] <- 80
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["geneNameFontSize"]] <- 7
heatmapClusterMarkersRnaPcSctRegulonContinuous <-
Heatmap(
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["countMatrixRange01"]],
name = "Expression",
col = heatmapColorsContinuous,
cluster_columns = TRUE,
show_row_names =
length(heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["regulonsToPlot"]]) <=
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["maxGenesForNames"]],
row_names_gp =
gpar(fontsize = heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["geneNameFontSize"]]),
show_column_names = FALSE,
top_annotation =
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["colAnno"]])
# Save heatmap plot
pdf(
file.path(
dirPlots,
paste0(
"heatmapClusterMarkersRnaPcSctRegulonContinuous",
".", filenameSuffix, ".pdf")),
w = 11, h = 6,
useDingbats = F)
print(heatmapClusterMarkersRnaPcSctRegulonContinuous)
invisible(dev.off())
heatmapClusterMarkersRnaPcSctRegulonBinaryOrderByClusterTreatment <-
Heatmap(
heatmapParamsClusterMarkersRnaPcSctRegulonBinary[["countMatrixBinary"]],
name = "Expression",
col = heatmapColorsBinary,
cluster_columns = FALSE,
show_row_names =
length(heatmapParamsClusterMarkersRnaPcSctRegulonBinary[["regulonsToPlot"]]) <=
heatmapParamsClusterMarkersRnaPcSctRegulonBinary[["maxGenesForNames"]],
row_names_gp =
gpar(fontsize = heatmapParamsClusterMarkersRnaPcSctRegulonBinary[["geneNameFontSize"]]),
show_column_names = FALSE,
top_annotation =
heatmapParamsClusterMarkersRnaPcSctRegulonBinary[["colAnno"]])
# Save heatmap plot
pdf(
file.path(
dirPlots,
paste0(
"heatmapClusterMarkersRnaPcSctRegulonBinaryOrderByClusterTreatment",
".pdf")),
w = 11, h = 6,
useDingbats = F)
print(heatmapClusterMarkersRnaPcSctRegulonBinaryOrderByClusterTreatment)
invisible(dev.off())
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous <- list()
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["nRegulonsToPlotPerCluster"]] <- 10
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["regulonsToPlot"]] <-
clusterMarkers[[paste0(clusterName[["rnaPcSct"]], "_regulonContinuous")]] %>%
dplyr::arrange(cluster, p_val) %>%
group_by(cluster) %>%
dplyr::slice(1:heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["nRegulonsToPlotPerCluster"]]) %>%
dplyr::pull(gene) %>%
unique()
## check for problem cells that throw off the gene expression scale; more relevant for 10X and similar
## sum the range01-scaled residual counts
# sort(
#   colSums(
#     t(apply(
#       residuals_cdr_prop_mtDNA_reads.select_genes_for_cluster_definitions[
#         genes_to_plot.select_genes_for_cluster_definitions, ], 1, range01))), decreasing=TRUE) %>%
#   head(50)
# no cells with super high expression here
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["cellsToExclude"]] <-
c()
# set up color scheme
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["annotationCols"]] <- list()
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["annotationCols"]][["cluster"]] <-
big_colorblind_pal(n_distinct(clusterMarkers[[clusterName[["rnaPcSct"]]]]$cluster)) %>%
setNames(as.character(sort(unique(clusterMarkers[[clusterName[["rnaPcSct"]]]]$cluster))))
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["annotationCols"]][["treatment"]] <-
palTreatment
# Determine order of libraries (for use with counts and heatmap annotation)
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["cellBarcodeOrder"]] <-
data10x@meta.data %>%
dplyr::filter(
cellBarcode %nin% heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["cellsToExclude"]]) %>%
dplyr::arrange(
!!rlang::sym(clusterName[["rnaPcSct"]]),
treatment, cellBarcode) %>%
pull(cellBarcode)
# Make a column annotation object
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["colAnno"]] <-
HeatmapAnnotation(
df =
data10x@meta.data[
match(
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["cellBarcodeOrder"]],
data10x@meta.data$cellBarcode),] %>%
dplyr::select(
cluster = !!rlang::sym(clusterName[["rnaPcSct"]]),
treatment),
col = list(
cluster =
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["annotationCols"]][["cluster"]],
treatment =
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["annotationCols"]][["treatment"]]),
show_legend = c(TRUE, TRUE))
# Set up heatmap counts matrix
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["countMatrix"]] <-
data10x@assays$regulonContinuous@data[
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["regulonsToPlot"]],
match(
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["cellBarcodeOrder"]],
colnames(data10x@assays$regulonContinuous@data))]
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["countMatrixRange01"]] <-
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["countMatrix"]] %>%
apply(MARGIN = 1, range01) %>%
t()
# set gene name display options
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["maxGenesForNames"]] <- 80
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["geneNameFontSize"]] <- 7
heatmapClusterMarkersRnaPcSctRegulonContinuous <-
Heatmap(
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["countMatrixRange01"]],
name = "Expression",
col = heatmapColorsContinuous,
cluster_columns = TRUE,
show_row_names =
length(heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["regulonsToPlot"]]) <=
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["maxGenesForNames"]],
row_names_gp =
gpar(fontsize = heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["geneNameFontSize"]]),
show_column_names = FALSE,
top_annotation =
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["colAnno"]])
# print(heatmapClusterMarkersRnaPcSctRegulonContinuous)
# Save heatmap plot
pdf(
file.path(
dirPlots,
"heatmapClusterMarkersRnaPcSctRegulonContinuous.pdf"),
w = 11, h = 6,
useDingbats = F)
print(heatmapClusterMarkersRnaPcSctRegulonContinuous)
invisible(dev.off())
heatmapClusterMarkersRnaPcSctRegulonContinuousOrderByClusterTreatment <-
Heatmap(
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["countMatrixRange01"]],
name = "Expression",
col = heatmapColorsContinuous,
cluster_columns = FALSE,
show_row_names =
length(heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["regulonsToPlot"]]) <=
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["maxGenesForNames"]],
row_names_gp =
gpar(fontsize = heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["geneNameFontSize"]]),
show_column_names = FALSE,
top_annotation =
heatmapParamsClusterMarkersRnaPcSctRegulonContinuous[["colAnno"]])
# print(heatmapClusterMarkersRnaPcSctRegulonContinuousOrderByClusterTreatment)
# Save heatmap plot
pdf(
file.path(
dirPlots,
"heatmapClusterMarkersRnaPcSctRegulonContinuousOrderByClusterTreatment.pdf"),
w = 11, h = 6,
useDingbats = F)
print(heatmapClusterMarkersRnaPcSctRegulonContinuousOrderByClusterTreatment)
invisible(dev.off())
load_packages_with_install("10xGenomics/loupeR", location = "github")
?loupeR::create_loupe_from_seurat
load_packages_with_install("10xGenomics/loupeR", location = "github")
loupeR::create_loupe_from_seurat(
obj = data10x,
output_dir = dirDataOutput,
output_name = "data10xP389-4.cloupe",
force = TRUE)
load_packages_with_install("10xGenomics/loupeR", location = "github")
DefaultAssay(data10x) <- "rnaPcSct"
loupeR::create_loupe_from_seurat(
obj = data10x,
output_dir = dirDataOutput,
output_name = "data10x.P389-4",
force = TRUE)
Seurat::Reductions
Seurat::Assays(data10x)
data10x@reductions
?DietSeurat
load_packages_with_install("10xGenomics/loupeR", location = "github")
DefaultAssay(data10x) <- "rnaPcSct"
loupeR::create_loupe_from_seurat(
obj =
# remove some unneeded elements
DietSeurat(
data10x,
assays = Seurat::Assays(data10x),
dimreducs = c("umap_rnaPcSct", "umap_regulonBinary", "umap_regulonContinuous")),
output_dir = dirDataOutput,
output_name = "data10x.P389-4",
force = TRUE)
qwraps2::lazyload_cache_dir("/Users/mattdufort/Library/CloudStorage/Box-Box/Projects/P389_H_Poly_T_cell_10x/code/P389-1-analysis-MD_cache/html")
# code from Naresh
miscHelpers::load_packages_with_install(
c("aertslab/SCopeLoomR",
"aertslab/SCENIC"),
location = "github")
## Read information from loom file:
filenameLoomScenicPostRun <- file.path(dirScenicRun, "all_cells_pyscenic_out.loom")
## install SCENIC package, following instructions at
# https://htmlpreview.github.io/?https://github.com/aertslab/SCENIC/blob/master/inst/doc/SCENIC_Setup.html
miscHelpers::load_packages_with_install("aertslab/SCENIC", location = "github")
## setup SCENIC paths
dirScenicRun <- file.path(dirBfxBase, "workspace", "mdufort", "240806-P389-1_SCENIC")
dirScenicOutputs <- file.path(dirScenicRun, "int")
if (!dir.exists(dirScenicOutputs)) dir.create(dirScenicOutputs)
## select data for SCENIC
# downsample here if needed
dataSeuratForScenic <- data10x
exprMatScenic <-
as.matrix(SeuratObject::GetAssayData(dataSeuratForScenic, assay = "RNA", layer = "counts"))
# load motif annotations
# this object name appears to be hard-coded somewhere within SCENIC, so needs to be named motifAnnotations_hgnc or motifAnnotations_mgi
# this is because it's actually a data object within the package RcisTarget
data(list = "motifAnnotations_mgi", package = "RcisTarget")
motifAnnotations_mgi <- motifAnnotations
rm(motifAnnotations)
orgScenic <- "mgi"
dirDbScenic <-
file.path(
dirBfxBase,
"workspace", "mdufort", "SCENIC", "database", "mm9") # RcisTarget databases location
datasetTitleScenic <- "SCENIC on mouse CD4 T cells" # choose a name for your analysis
data(defaultDbNames)
dbsScenic <- defaultDbNames[[orgScenic]]
# initialize SCENIC (makes some steps easier even when using pySCENIC)
scenicOptions <-
initializeScenic(
org = orgScenic, dbDir = dirDbScenic, dbs = dbsScenic,
datasetTitle = datasetTitleScenic, nCores = 10)
scenicOptions@inputDatasetInfo$cellInfo <- file.path(dirScenicOutputs, "cellInfo.Rds")
saveRDS(scenicOptions, file = file.path(dirScenicOutputs, "scenicOptions.Rds"))
## Filter the genes (loading filtered version if already done, because it takes some time)
# currently using genes that have an average of 3 counts per 100 cells, and are present in at least 1% of cells
# (not sure where those numbers came from)
filenameExprMatScenicFiltered <-
file.path(dirDataSaved,
"dataSeuratForScenicExprMatFiltered.RDS")
if (file.exists(filenameExprMatScenicFiltered)) {
exprMatScenicFiltered <- readRDS(filenameExprMatScenicFiltered)
} else {
# this version is slow because it does some additional stuff
genesKeptScenic <-
geneFiltering(
exprMatScenic, scenicOptions = scenicOptions,
minCountsPerGene = 3 * .01 * ncol(exprMatScenic),
minSamples = ncol(exprMatScenic) * .01)
exprMatScenicFiltered <- exprMatScenic[genesKeptScenic, ]
saveRDS(exprMatScenicFiltered, file = filenameExprMatScenicFiltered)
# should probably use Naresh's function to filter the genes as it's much faster and doesn't bother with the wasted steps
}
## Create loom file to work with pySCENIC
filenameLoomFileScenicPreRun <- file.path(dirScenicRun, "all_cells.loom")
if (!file.exists(filenameLoomFileScenicPreRun)) {
miscHelpers::load_packages_with_install("aertslab/SCopeLoomR", location = "github")
loomScenicPreRun <-
build_loom(
file.name = file.path(filenameLoomFileScenicPreRun),
dgem = exprMatScenicFiltered)
# this is probably optional, as I'm just going to pull the SCENIC output back in
# loomScenicPreRun <- addCellAnnotationLoom(loomScenicPreRun, cellInfoScenic)
close_loom(loomScenicPreRun)
}
rm(exprMatScenicFiltered, exprMatScenic)
# code from Naresh
miscHelpers::load_packages_with_install(
c("aertslab/SCopeLoomR",
"aertslab/SCENIC"),
location = "github")
## Read information from loom file:
filenameLoomScenicPostRun <- file.path(dirScenicRun, "all_cells_pyscenic_out.loom")
loomScenicPostRun <- open_loom(filenameLoomScenicPostRun, mode = "r")
# get regulon/gene incidence matrix
regulonIncidenceMatrix <- get_regulons(loomScenicPostRun, column.attr.name = "Regulons")
# convert regulon incidence matrix to gene lists
regulonGeneLists <- regulonsToGeneLists(regulonIncidenceMatrix)
# get regulon scores in each cell
regulonAuc <- get_regulons_AUC(loomScenicPostRun, column.attr.name = 'RegulonsAUC')
# get regulon thresholds (for some reason they come in with the regulons in the values and the thresholds in the names)
regulonAucThresholds.tmp <- get_regulon_thresholds(loomScenicPostRun)
regulonAucThresholds <-
as.numeric(names(regulonAucThresholds.tmp)) %>%
setNames(unname(regulonAucThresholds.tmp))
library(tidyverse)
regulonAucThresholds <-
as.numeric(names(regulonAucThresholds.tmp)) %>%
setNames(unname(regulonAucThresholds.tmp))
close_loom(loomScenicPostRun)
# create continuous assay from this matrix (which is the continuous version)
regulonActivityContinuous <- AUCell::getAUC(regulonAuc)
# create binary assay from AUC matrix, by comparing each value to the corresponding regulon threshold
regulonActivityBinary <-
regulonActivityContinuous >=
regulonAucThresholds[
match(rownames(regulonActivityContinuous), names(regulonAucThresholds))]
# read in the adjacencies file from pySCENIC
adjacenciesScenic <- readr::read_tsv(file = file.path(dirScenicRun, "adj.tsv"))
# read in the regulons file from pySCENIC (column headers are weird, read in using some custom code)
regulonDataScenic <-
readr::read_csv(file = file.path(dirScenicRun, "reg.csv"), skip = 3, col_names = FALSE)
colnamesRegulonDataScenic.tmp <-
readr::read_csv(file = file.path(dirScenicRun, "reg.csv"), n_max = 3, col_names = FALSE) %>%
as.matrix() %>%
apply(2, paste, collapse = " ") %>%
str_remove_all("NA") %>%
str_trim()
colnames(regulonDataScenic) <- colnamesRegulonDataScenic.tmp
rm_tmp(ask = FALSE)
library(miscHelpers)
regulonsToGeneLists
# code from Naresh
miscHelpers::load_packages_with_install(
c("aertslab/SCopeLoomR",
"aertslab/SCENIC"),
location = "github")
filenameScenicOutputsSaved <-
file.path(dirDataSaved, "scenicOutput.RData")
filenameScenicOutputsSaved <-
file.path(dirDataSaved, "scenicOutput.RData")
## Read information from loom file:
filenameLoomScenicPostRun <- file.path(dirScenicRun, "all_cells_pyscenic_out.loom")
loomScenicPostRun <- open_loom(filenameLoomScenicPostRun, mode = "r")
# get regulon/gene incidence matrix
regulonIncidenceMatrix <- get_regulons(loomScenicPostRun, column.attr.name = "Regulons")
# convert regulon incidence matrix to gene lists
regulonGeneLists <- regulonsToGeneLists(regulonIncidenceMatrix)
# get regulon scores in each cell
regulonAuc <- get_regulons_AUC(loomScenicPostRun, column.attr.name = 'RegulonsAUC')
# get regulon thresholds (for some reason they come in with the regulons in the values and the thresholds in the names)
regulonAucThresholds.tmp <- get_regulon_thresholds(loomScenicPostRun)
regulonAucThresholds <-
as.numeric(names(regulonAucThresholds.tmp)) %>%
setNames(unname(regulonAucThresholds.tmp))
close_loom(loomScenicPostRun)
# create continuous assay from this matrix (which is the continuous version)
regulonActivityContinuous <- AUCell::getAUC(regulonAuc)
# create binary assay from AUC matrix, by comparing each value to the corresponding regulon threshold
regulonActivityBinary <-
regulonActivityContinuous >=
regulonAucThresholds[
match(rownames(regulonActivityContinuous), names(regulonAucThresholds))]
# read in the adjacencies file from pySCENIC
adjacenciesScenic <- readr::read_tsv(file = file.path(dirScenicRun, "adj.tsv"))
# read in the regulons file from pySCENIC (column headers are weird, read in using some custom code)
regulonDataScenic <-
readr::read_csv(file = file.path(dirScenicRun, "reg.csv"), skip = 3, col_names = FALSE)
colnamesRegulonDataScenic.tmp <-
readr::read_csv(file = file.path(dirScenicRun, "reg.csv"), n_max = 3, col_names = FALSE) %>%
as.matrix() %>%
apply(2, paste, collapse = " ") %>%
str_remove_all("NA") %>%
str_trim()
colnames(regulonDataScenic) <- colnamesRegulonDataScenic.tmp
save(
filenameLoomScenicPostRun,
regulonIncidenceMatrix,
regulonGeneLists,
regulonAuc,
regulonAucThresholds,
regulonActivityContinuous,
regulonActivityBinary,
adjacenciesScenic,
regulonDataScenic,
file = filenameScenicOutputsSaved)
rm_tmp(ask = FALSE)
paste0(
"seurat_clusters_regulonBinary_",
str_replace(
sprintf(
"%.1f",
round(clusterResolution[["regulonBinary"]], 1)),
"\\.", "p"))
clusterResolution <-
c("rnaPcSct" = 0.2, # ? clusters
"regulonBinary" = 0.8,
"regulonContinuous" = 0.8
)
paste0(
"seurat_clusters_regulonBinary_",
str_replace(
sprintf(
"%.1f",
round(clusterResolution[["regulonBinary"]], 1)),
"\\.", "p"))
paste0(
"seurat_clusters_regulonContinuous_",
str_replace(
sprintf(
"%.1f",
round(clusterResolution[["regulonContinuous"]], 1)),
"\\.", "p"))
qwraps2::lazyload_cache_dir("/Users/mattdufort/Library/CloudStorage/Box-Box/Projects/BMS_Early_AMPLE_CyTOF/code/BMS_Early_AMPLE_CyTOF_analysis_1_cache/html")
library(tidyverse)
glimpse(mergedDataTransformed)
glimpse(mergedDataUntransformedUnfiltered)
glimpse(astrolabeDataComplete)
packagesDirectory <-
file.path("~", "Library", "CloudStorage", "Box-Box",
"Tools", "R_scripts", "R_packages")
packageName <- "briDiscovr"
wd.tmp <- getwd()
setwd(file.path(packagesDirectory, packageName))
# usethis::create_package(packageName)  # initial package creation
devtools::document()
devtools::install(file.path("..", packageName))
file.path("..", packageName)
getwd()
devtools::check(file.path(packagesDirectory, packageName))
wd.tmp
getwd()
# usethis::create_package(packageName)  # initial package creation
devtools::document()
devtools::install(file.path("..", packageName))
devtools::check(file.path(packagesDirectory, packageName))
credentials::set_github_pat()
devtools::install_github(paste("BenaroyaResearch", packageName, sep="/"))
