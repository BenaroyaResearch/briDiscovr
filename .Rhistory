?DietSeurat
load_packages_with_install("10xGenomics/loupeR", location = "github")
DefaultAssay(data10x) <- "rnaPcSct"
loupeR::create_loupe_from_seurat(
obj =
# remove some unneeded elements
DietSeurat(
data10x,
assays = Seurat::Assays(data10x),
dimreducs = c("umap_rnaPcSct", "umap_regulonBinary", "umap_regulonContinuous")),
output_dir = dirDataOutput,
output_name = "data10x.P389-4",
force = TRUE)
qwraps2::lazyload_cache_dir("/Users/mattdufort/Library/CloudStorage/Box-Box/Projects/P389_H_Poly_T_cell_10x/code/P389-1-analysis-MD_cache/html")
# code from Naresh
miscHelpers::load_packages_with_install(
c("aertslab/SCopeLoomR",
"aertslab/SCENIC"),
location = "github")
## Read information from loom file:
filenameLoomScenicPostRun <- file.path(dirScenicRun, "all_cells_pyscenic_out.loom")
## install SCENIC package, following instructions at
# https://htmlpreview.github.io/?https://github.com/aertslab/SCENIC/blob/master/inst/doc/SCENIC_Setup.html
miscHelpers::load_packages_with_install("aertslab/SCENIC", location = "github")
## setup SCENIC paths
dirScenicRun <- file.path(dirBfxBase, "workspace", "mdufort", "240806-P389-1_SCENIC")
dirScenicOutputs <- file.path(dirScenicRun, "int")
if (!dir.exists(dirScenicOutputs)) dir.create(dirScenicOutputs)
## select data for SCENIC
# downsample here if needed
dataSeuratForScenic <- data10x
exprMatScenic <-
as.matrix(SeuratObject::GetAssayData(dataSeuratForScenic, assay = "RNA", layer = "counts"))
# load motif annotations
# this object name appears to be hard-coded somewhere within SCENIC, so needs to be named motifAnnotations_hgnc or motifAnnotations_mgi
# this is because it's actually a data object within the package RcisTarget
data(list = "motifAnnotations_mgi", package = "RcisTarget")
motifAnnotations_mgi <- motifAnnotations
rm(motifAnnotations)
orgScenic <- "mgi"
dirDbScenic <-
file.path(
dirBfxBase,
"workspace", "mdufort", "SCENIC", "database", "mm9") # RcisTarget databases location
datasetTitleScenic <- "SCENIC on mouse CD4 T cells" # choose a name for your analysis
data(defaultDbNames)
dbsScenic <- defaultDbNames[[orgScenic]]
# initialize SCENIC (makes some steps easier even when using pySCENIC)
scenicOptions <-
initializeScenic(
org = orgScenic, dbDir = dirDbScenic, dbs = dbsScenic,
datasetTitle = datasetTitleScenic, nCores = 10)
scenicOptions@inputDatasetInfo$cellInfo <- file.path(dirScenicOutputs, "cellInfo.Rds")
saveRDS(scenicOptions, file = file.path(dirScenicOutputs, "scenicOptions.Rds"))
## Filter the genes (loading filtered version if already done, because it takes some time)
# currently using genes that have an average of 3 counts per 100 cells, and are present in at least 1% of cells
# (not sure where those numbers came from)
filenameExprMatScenicFiltered <-
file.path(dirDataSaved,
"dataSeuratForScenicExprMatFiltered.RDS")
if (file.exists(filenameExprMatScenicFiltered)) {
exprMatScenicFiltered <- readRDS(filenameExprMatScenicFiltered)
} else {
# this version is slow because it does some additional stuff
genesKeptScenic <-
geneFiltering(
exprMatScenic, scenicOptions = scenicOptions,
minCountsPerGene = 3 * .01 * ncol(exprMatScenic),
minSamples = ncol(exprMatScenic) * .01)
exprMatScenicFiltered <- exprMatScenic[genesKeptScenic, ]
saveRDS(exprMatScenicFiltered, file = filenameExprMatScenicFiltered)
# should probably use Naresh's function to filter the genes as it's much faster and doesn't bother with the wasted steps
}
## Create loom file to work with pySCENIC
filenameLoomFileScenicPreRun <- file.path(dirScenicRun, "all_cells.loom")
if (!file.exists(filenameLoomFileScenicPreRun)) {
miscHelpers::load_packages_with_install("aertslab/SCopeLoomR", location = "github")
loomScenicPreRun <-
build_loom(
file.name = file.path(filenameLoomFileScenicPreRun),
dgem = exprMatScenicFiltered)
# this is probably optional, as I'm just going to pull the SCENIC output back in
# loomScenicPreRun <- addCellAnnotationLoom(loomScenicPreRun, cellInfoScenic)
close_loom(loomScenicPreRun)
}
rm(exprMatScenicFiltered, exprMatScenic)
# code from Naresh
miscHelpers::load_packages_with_install(
c("aertslab/SCopeLoomR",
"aertslab/SCENIC"),
location = "github")
## Read information from loom file:
filenameLoomScenicPostRun <- file.path(dirScenicRun, "all_cells_pyscenic_out.loom")
loomScenicPostRun <- open_loom(filenameLoomScenicPostRun, mode = "r")
# get regulon/gene incidence matrix
regulonIncidenceMatrix <- get_regulons(loomScenicPostRun, column.attr.name = "Regulons")
# convert regulon incidence matrix to gene lists
regulonGeneLists <- regulonsToGeneLists(regulonIncidenceMatrix)
# get regulon scores in each cell
regulonAuc <- get_regulons_AUC(loomScenicPostRun, column.attr.name = 'RegulonsAUC')
# get regulon thresholds (for some reason they come in with the regulons in the values and the thresholds in the names)
regulonAucThresholds.tmp <- get_regulon_thresholds(loomScenicPostRun)
regulonAucThresholds <-
as.numeric(names(regulonAucThresholds.tmp)) %>%
setNames(unname(regulonAucThresholds.tmp))
library(tidyverse)
regulonAucThresholds <-
as.numeric(names(regulonAucThresholds.tmp)) %>%
setNames(unname(regulonAucThresholds.tmp))
close_loom(loomScenicPostRun)
# create continuous assay from this matrix (which is the continuous version)
regulonActivityContinuous <- AUCell::getAUC(regulonAuc)
# create binary assay from AUC matrix, by comparing each value to the corresponding regulon threshold
regulonActivityBinary <-
regulonActivityContinuous >=
regulonAucThresholds[
match(rownames(regulonActivityContinuous), names(regulonAucThresholds))]
# read in the adjacencies file from pySCENIC
adjacenciesScenic <- readr::read_tsv(file = file.path(dirScenicRun, "adj.tsv"))
# read in the regulons file from pySCENIC (column headers are weird, read in using some custom code)
regulonDataScenic <-
readr::read_csv(file = file.path(dirScenicRun, "reg.csv"), skip = 3, col_names = FALSE)
colnamesRegulonDataScenic.tmp <-
readr::read_csv(file = file.path(dirScenicRun, "reg.csv"), n_max = 3, col_names = FALSE) %>%
as.matrix() %>%
apply(2, paste, collapse = " ") %>%
str_remove_all("NA") %>%
str_trim()
colnames(regulonDataScenic) <- colnamesRegulonDataScenic.tmp
rm_tmp(ask = FALSE)
library(miscHelpers)
regulonsToGeneLists
# code from Naresh
miscHelpers::load_packages_with_install(
c("aertslab/SCopeLoomR",
"aertslab/SCENIC"),
location = "github")
filenameScenicOutputsSaved <-
file.path(dirDataSaved, "scenicOutput.RData")
filenameScenicOutputsSaved <-
file.path(dirDataSaved, "scenicOutput.RData")
## Read information from loom file:
filenameLoomScenicPostRun <- file.path(dirScenicRun, "all_cells_pyscenic_out.loom")
loomScenicPostRun <- open_loom(filenameLoomScenicPostRun, mode = "r")
# get regulon/gene incidence matrix
regulonIncidenceMatrix <- get_regulons(loomScenicPostRun, column.attr.name = "Regulons")
# convert regulon incidence matrix to gene lists
regulonGeneLists <- regulonsToGeneLists(regulonIncidenceMatrix)
# get regulon scores in each cell
regulonAuc <- get_regulons_AUC(loomScenicPostRun, column.attr.name = 'RegulonsAUC')
# get regulon thresholds (for some reason they come in with the regulons in the values and the thresholds in the names)
regulonAucThresholds.tmp <- get_regulon_thresholds(loomScenicPostRun)
regulonAucThresholds <-
as.numeric(names(regulonAucThresholds.tmp)) %>%
setNames(unname(regulonAucThresholds.tmp))
close_loom(loomScenicPostRun)
# create continuous assay from this matrix (which is the continuous version)
regulonActivityContinuous <- AUCell::getAUC(regulonAuc)
# create binary assay from AUC matrix, by comparing each value to the corresponding regulon threshold
regulonActivityBinary <-
regulonActivityContinuous >=
regulonAucThresholds[
match(rownames(regulonActivityContinuous), names(regulonAucThresholds))]
# read in the adjacencies file from pySCENIC
adjacenciesScenic <- readr::read_tsv(file = file.path(dirScenicRun, "adj.tsv"))
# read in the regulons file from pySCENIC (column headers are weird, read in using some custom code)
regulonDataScenic <-
readr::read_csv(file = file.path(dirScenicRun, "reg.csv"), skip = 3, col_names = FALSE)
colnamesRegulonDataScenic.tmp <-
readr::read_csv(file = file.path(dirScenicRun, "reg.csv"), n_max = 3, col_names = FALSE) %>%
as.matrix() %>%
apply(2, paste, collapse = " ") %>%
str_remove_all("NA") %>%
str_trim()
colnames(regulonDataScenic) <- colnamesRegulonDataScenic.tmp
save(
filenameLoomScenicPostRun,
regulonIncidenceMatrix,
regulonGeneLists,
regulonAuc,
regulonAucThresholds,
regulonActivityContinuous,
regulonActivityBinary,
adjacenciesScenic,
regulonDataScenic,
file = filenameScenicOutputsSaved)
rm_tmp(ask = FALSE)
paste0(
"seurat_clusters_regulonBinary_",
str_replace(
sprintf(
"%.1f",
round(clusterResolution[["regulonBinary"]], 1)),
"\\.", "p"))
clusterResolution <-
c("rnaPcSct" = 0.2, # ? clusters
"regulonBinary" = 0.8,
"regulonContinuous" = 0.8
)
paste0(
"seurat_clusters_regulonBinary_",
str_replace(
sprintf(
"%.1f",
round(clusterResolution[["regulonBinary"]], 1)),
"\\.", "p"))
paste0(
"seurat_clusters_regulonContinuous_",
str_replace(
sprintf(
"%.1f",
round(clusterResolution[["regulonContinuous"]], 1)),
"\\.", "p"))
qwraps2::lazyload_cache_dir("/Users/mattdufort/Library/CloudStorage/Box-Box/Projects/BMS_Early_AMPLE_CyTOF/code/BMS_Early_AMPLE_CyTOF_analysis_1_cache/html")
library(tidyverse)
glimpse(mergedDataTransformed)
glimpse(mergedDataUntransformedUnfiltered)
glimpse(astrolabeDataComplete)
# setwd("~/Box Sync/Tools/R_scripts/R_packages")
library(devtools)
library(roxygen2)
packagesDirectory <-
file.path("~", "Library", "CloudStorage", "Box-Box",
"Tools", "R_scripts", "R_packages")
packageName <- "briDiscovr"
wd.tmp <- getwd()
setwd(file.path(packagesDirectory, packageName))
# usethis::create_package(packageName)  # initial package creation
devtools::document()
devtools::install(file.path("..", packageName))
credentials::set_github_pat()
devtools::install(file.path("..", packageName))
setwd(wd.tmp)
rm(wd.tmp)
devtools::check(file.path(packagesDirectory, packageName))
# setwd("~/Box Sync/Tools/R_scripts/R_packages")
library(devtools)
library(roxygen2)
packagesDirectory <-
file.path("~", "Library", "CloudStorage", "Box-Box",
"Tools", "R_scripts", "R_packages")
packageName <- "briDiscovr"
wd.tmp <- getwd()
setwd(file.path(packagesDirectory, packageName))
# usethis::create_package(packageName)  # initial package creation
devtools::document()
credentials::set_github_pat()
devtools::install(file.path("..", packageName))
setwd(wd.tmp)
rm(wd.tmp)
devtools::check(file.path(packagesDirectory, packageName))
# setwd("~/Box Sync/Tools/R_scripts/R_packages")
library(devtools)
library(roxygen2)
# dir()
packagesDirectory <-
file.path("~", "Library", "CloudStorage", "Box-Box",
"Tools", "R_scripts", "R_packages")
# select the package to update/install
packageName <- "miscHelpers"
packageName <- "comboVisTools"
packageName <- "corrMatrix"
packageName <- "countSubsetNorm"
packageName <- "geneSetTools"
packageName <- "limmaTools"
packageName <- "MASTtools"
packageName <- "RNAseQC"
packageName <- "WGCNAtools"
packageName <- "R10Xtools"
packageName <- "TCRtools"
packageName <- "CpeptideTools"
packageName <- "briDiscovr"
wd.tmp <- getwd()
setwd(file.path(packagesDirectory, packageName))
# usethis::create_package(packageName)  # initial package creation
devtools::document()
credentials::set_github_pat()
devtools::install(file.path("..", packageName))
setwd(wd.tmp)
rm(wd.tmp)
# setwd("~/Box Sync/Tools/R_scripts/R_packages")
library(devtools)
library(roxygen2)
# dir()
packagesDirectory <-
file.path("~", "Library", "CloudStorage", "Box-Box",
"Tools", "R_scripts", "R_packages")
# select the package to update/install
packageName <- "miscHelpers"
packageName <- "comboVisTools"
packageName <- "corrMatrix"
packageName <- "countSubsetNorm"
packageName <- "geneSetTools"
packageName <- "limmaTools"
packageName <- "MASTtools"
packageName <- "RNAseQC"
packageName <- "WGCNAtools"
packageName <- "R10Xtools"
packageName <- "TCRtools"
packageName <- "CpeptideTools"
packageName <- "briDiscovr"
wd.tmp <- getwd()
setwd(file.path(packagesDirectory, packageName))
# usethis::create_package(packageName)  # initial package creation
devtools::document()
credentials::set_github_pat()
devtools::install(file.path("..", packageName))
setwd(wd.tmp)
rm(wd.tmp)
# setwd("~/Box Sync/Tools/R_scripts/R_packages")
library(devtools)
library(roxygen2)
# dir()
packagesDirectory <-
file.path("~", "Library", "CloudStorage", "Box-Box",
"Tools", "R_scripts", "R_packages")
# select the package to update/install
packageName <- "miscHelpers"
packageName <- "comboVisTools"
packageName <- "corrMatrix"
packageName <- "countSubsetNorm"
packageName <- "geneSetTools"
packageName <- "limmaTools"
packageName <- "MASTtools"
packageName <- "RNAseQC"
packageName <- "WGCNAtools"
packageName <- "R10Xtools"
packageName <- "TCRtools"
packageName <- "CpeptideTools"
packageName <- "briDiscovr"
wd.tmp <- getwd()
setwd(file.path(packagesDirectory, packageName))
# usethis::create_package(packageName)  # initial package creation
devtools::document()
credentials::set_github_pat()
devtools::install(file.path("..", packageName))
setwd(wd.tmp)
rm(wd.tmp)
devtools::check(file.path(packagesDirectory, packageName))
# setwd("~/Box Sync/Tools/R_scripts/R_packages")
library(devtools)
library(roxygen2)
packagesDirectory <-
file.path("~", "Library", "CloudStorage", "Box-Box",
"Tools", "R_scripts", "R_packages")
packageName <- "briDiscovr"
wd.tmp <- getwd()
setwd(file.path(packagesDirectory, packageName))
# usethis::create_package(packageName)  # initial package creation
devtools::document()
credentials::set_github_pat()
devtools::install(file.path("..", packageName))
setwd(wd.tmp)
rm(wd.tmp)
# setwd("~/Box Sync/Tools/R_scripts/R_packages")
library(devtools)
library(roxygen2)
# dir()
packagesDirectory <-
file.path("~", "Library", "CloudStorage", "Box-Box",
"Tools", "R_scripts", "R_packages")
# select the package to update/install
packageName <- "miscHelpers"
packageName <- "comboVisTools"
packageName <- "corrMatrix"
packageName <- "countSubsetNorm"
packageName <- "geneSetTools"
packageName <- "limmaTools"
packageName <- "MASTtools"
packageName <- "RNAseQC"
packageName <- "WGCNAtools"
packageName <- "R10Xtools"
packageName <- "TCRtools"
packageName <- "CpeptideTools"
packageName <- "briDiscovr"
wd.tmp <- getwd()
setwd(file.path(packagesDirectory, packageName))
# usethis::create_package(packageName)  # initial package creation
devtools::document()
credentials::set_github_pat()
devtools::install(file.path("..", packageName))
setwd(wd.tmp)
rm(wd.tmp)
# setwd("~/Box Sync/Tools/R_scripts/R_packages")
library(devtools)
library(roxygen2)
packagesDirectory <-
file.path("~", "Library", "CloudStorage", "Box-Box",
"Tools", "R_scripts", "R_packages")
packageName <- "briDiscovr"
# check package contents
devtools::check(file.path(packagesDirectory, packageName))
Seurat::NormalizeData
?Seurat::NormalizeData
# setwd("~/Box Sync/Tools/R_scripts/R_packages")
library(devtools)
library(roxygen2)
# dir()
packagesDirectory <-
file.path("~", "Library", "CloudStorage", "Box-Box",
"Tools", "R_scripts", "R_packages")
# select the package to update/install
packageName <- "miscHelpers"
packageName <- "comboVisTools"
packageName <- "corrMatrix"
packageName <- "countSubsetNorm"
packageName <- "geneSetTools"
packageName <- "limmaTools"
packageName <- "MASTtools"
packageName <- "RNAseQC"
packageName <- "WGCNAtools"
packageName <- "R10Xtools"
packageName <- "TCRtools"
packageName <- "CpeptideTools"
packageName <- "briDiscovr"
wd.tmp <- getwd()
setwd(file.path(packagesDirectory, packageName))
# usethis::create_package(packageName)  # initial package creation
devtools::document()
credentials::set_github_pat()
devtools::install(file.path("..", packageName))
setwd(wd.tmp)
rm(wd.tmp)
# setwd("~/Box Sync/Tools/R_scripts/R_packages")
library(devtools)
library(roxygen2)
# dir()
packagesDirectory <-
file.path("~", "Library", "CloudStorage", "Box-Box",
"Tools", "R_scripts", "R_packages")
# select the package to update/install
packageName <- "miscHelpers"
packageName <- "comboVisTools"
packageName <- "corrMatrix"
packageName <- "countSubsetNorm"
packageName <- "geneSetTools"
packageName <- "limmaTools"
packageName <- "MASTtools"
packageName <- "RNAseQC"
packageName <- "WGCNAtools"
packageName <- "R10Xtools"
packageName <- "TCRtools"
packageName <- "CpeptideTools"
packageName <- "briDiscovr"
wd.tmp <- getwd()
setwd(file.path(packagesDirectory, packageName))
# usethis::create_package(packageName)  # initial package creation
devtools::document()
credentials::set_github_pat()
devtools::install(file.path("..", packageName))
setwd(wd.tmp)
rm(wd.tmp)
# setwd("~/Box Sync/Tools/R_scripts/R_packages")
library(devtools)
library(roxygen2)
# dir()
packagesDirectory <-
file.path("~", "Library", "CloudStorage", "Box-Box",
"Tools", "R_scripts", "R_packages")
# select the package to update/install
packageName <- "miscHelpers"
packageName <- "comboVisTools"
packageName <- "corrMatrix"
packageName <- "countSubsetNorm"
packageName <- "geneSetTools"
packageName <- "limmaTools"
packageName <- "MASTtools"
packageName <- "RNAseQC"
packageName <- "WGCNAtools"
packageName <- "R10Xtools"
packageName <- "TCRtools"
packageName <- "CpeptideTools"
packageName <- "briDiscovr"
wd.tmp <- getwd()
setwd(file.path(packagesDirectory, packageName))
# usethis::create_package(packageName)  # initial package creation
devtools::document()
credentials::set_github_pat()
devtools::install(file.path("..", packageName))
setwd(wd.tmp)
rm(wd.tmp)
# check package contents
devtools::check(file.path(packagesDirectory, packageName))
# setwd("~/Box Sync/Tools/R_scripts/R_packages")
library(devtools)
library(roxygen2)
# dir()
packagesDirectory <-
file.path("~", "Library", "CloudStorage", "Box-Box",
"Tools", "R_scripts", "R_packages")
# select the package to update/install
packageName <- "miscHelpers"
packageName <- "comboVisTools"
packageName <- "corrMatrix"
packageName <- "countSubsetNorm"
packageName <- "geneSetTools"
packageName <- "limmaTools"
packageName <- "MASTtools"
packageName <- "RNAseQC"
packageName <- "WGCNAtools"
packageName <- "R10Xtools"
packageName <- "TCRtools"
packageName <- "CpeptideTools"
packageName <- "briDiscovr"
wd.tmp <- getwd()
setwd(file.path(packagesDirectory, packageName))
# usethis::create_package(packageName)  # initial package creation
devtools::document()
credentials::set_github_pat()
devtools::install(file.path("..", packageName))
# check package contents
devtools::check(file.path(packagesDirectory, packageName))
